cluster_var = as.vector(datain[, 1]),
counts_or_densities = c('densities', 'counts')[1], #c('densities', 'counts')[as.numeric(input$countdens)],
smoothing_method = c('smooth.spline', 0)[1], #c('smooth.spline', 0)[as.numeric(input$splinesmooth)],
smooth_par = NULL, #smoothval,
draw_ellipse = FALSE, #input$plotellipse,
variable_name_size = 14, #input$namesize,
var_names = TRUE, #input$varnames,
gray_scale = FALSE, #input$greyscale,
EVchoice = c(1,2), #as.numeric(evininput),
plotqual = FALSE, #input$plotqual
scaledmat = FALSE
)
exploding_bipl(
datain[, -1],
percentile_included = 99 /100, #input$percentile /100,
use_convex_hull = FALSE, #input$plothull,
fact_ = 2, #input$densinfl,
numticksfact = 6, #input$moreticks,
round_ticks_to = 2, #input$tickround,
ticks_in_original_units = TRUE, #(input$axvals == "Original"),
plot_the_dens = TRUE, #input$plotdens,
move_lines_dist = 0.2, #input$mld,
name = NULL, #obsnumplot,
plot_all_the_data = TRUE,
tick_size = 12, #input$ticksize,
cluster_var = as.vector(datain[, 1]),
counts_or_densities = c('densities', 'counts')[1], #c('densities', 'counts')[as.numeric(input$countdens)],
smoothing_method = c('smooth.spline', 0)[1], #c('smooth.spline', 0)[as.numeric(input$splinesmooth)],
smooth_par = NULL, #smoothval,
draw_ellipse = FALSE, #input$plotellipse,
variable_name_size = 14, #input$namesize,
var_names = TRUE, #input$varnames,
gray_scale = FALSE, #input$greyscale,
EVchoice = c(1,2), #as.numeric(evininput),
plotqual = FALSE, #input$plotqual
scaledmat = FALSE
)
exploding_bipl(
datain[, -1],
percentile_included = 99 /100, #input$percentile /100,
use_convex_hull = FALSE, #input$plothull,
fact_ = 1, #input$densinfl,
numticksfact = 6, #input$moreticks,
round_ticks_to = 2, #input$tickround,
ticks_in_original_units = TRUE, #(input$axvals == "Original"),
plot_the_dens = TRUE, #input$plotdens,
move_lines_dist = 0.2, #input$mld,
name = NULL, #obsnumplot,
plot_all_the_data = TRUE,
tick_size = 12, #input$ticksize,
cluster_var = as.vector(datain[, 1]),
counts_or_densities = c('densities', 'counts')[1], #c('densities', 'counts')[as.numeric(input$countdens)],
smoothing_method = c('smooth.spline', 0)[1], #c('smooth.spline', 0)[as.numeric(input$splinesmooth)],
smooth_par = NULL, #smoothval,
draw_ellipse = FALSE, #input$plotellipse,
variable_name_size = 14, #input$namesize,
var_names = TRUE, #input$varnames,
gray_scale = FALSE, #input$greyscale,
EVchoice = c(1,2), #as.numeric(evininput),
plotqual = FALSE, #input$plotqual
scaledmat = FALSE
)
exploding_bipl(
datain[, -1],
percentile_included = 99 /100, #input$percentile /100,
use_convex_hull = FALSE, #input$plothull,
fact_ = 1, #input$densinfl,
numticksfact = 6, #input$moreticks,
round_ticks_to = 1, #input$tickround,
ticks_in_original_units = TRUE, #(input$axvals == "Original"),
plot_the_dens = TRUE, #input$plotdens,
move_lines_dist = 0.2, #input$mld,
name = NULL, #obsnumplot,
plot_all_the_data = TRUE,
tick_size = 12, #input$ticksize,
cluster_var = as.vector(datain[, 1]),
counts_or_densities = c('densities', 'counts')[1], #c('densities', 'counts')[as.numeric(input$countdens)],
smoothing_method = c('smooth.spline', 0)[1], #c('smooth.spline', 0)[as.numeric(input$splinesmooth)],
smooth_par = NULL, #smoothval,
draw_ellipse = FALSE, #input$plotellipse,
variable_name_size = 14, #input$namesize,
var_names = TRUE, #input$varnames,
gray_scale = FALSE, #input$greyscale,
EVchoice = c(1,2), #as.numeric(evininput),
plotqual = FALSE, #input$plotqual
scaledmat = FALSE
)
exploding_bipl(
datain[, -1],
percentile_included = 99 /100, #input$percentile /100,
use_convex_hull = FALSE, #input$plothull,
fact_ = 1, #input$densinfl,
numticksfact = 6, #input$moreticks,
round_ticks_to = 1, #input$tickround,
ticks_in_original_units = TRUE, #(input$axvals == "Original"),
plot_the_dens = TRUE, #input$plotdens,
move_lines_dist = 1, #input$mld,
name = NULL, #obsnumplot,
plot_all_the_data = TRUE,
tick_size = 12, #input$ticksize,
cluster_var = as.vector(datain[, 1]),
counts_or_densities = c('densities', 'counts')[1], #c('densities', 'counts')[as.numeric(input$countdens)],
smoothing_method = c('smooth.spline', 0)[1], #c('smooth.spline', 0)[as.numeric(input$splinesmooth)],
smooth_par = NULL, #smoothval,
draw_ellipse = FALSE, #input$plotellipse,
variable_name_size = 14, #input$namesize,
var_names = TRUE, #input$varnames,
gray_scale = FALSE, #input$greyscale,
EVchoice = c(1,2), #as.numeric(evininput),
plotqual = FALSE, #input$plotqual
scaledmat = FALSE
)
exploding_bipl(
datain[, -1],
percentile_included = 99 /100, #input$percentile /100,
use_convex_hull = FALSE, #input$plothull,
fact_ = 1, #input$densinfl,
numticksfact = 6, #input$moreticks,
round_ticks_to = 1, #input$tickround,
ticks_in_original_units = TRUE, #(input$axvals == "Original"),
plot_the_dens = TRUE, #input$plotdens,
move_lines_dist = 1, #input$mld,
name = "1", #obsnumplot,
plot_all_the_data = TRUE,
tick_size = 12, #input$ticksize,
cluster_var = as.vector(datain[, 1]),
counts_or_densities = c('densities', 'counts')[1], #c('densities', 'counts')[as.numeric(input$countdens)],
smoothing_method = c('smooth.spline', 0)[1], #c('smooth.spline', 0)[as.numeric(input$splinesmooth)],
smooth_par = NULL, #smoothval,
draw_ellipse = FALSE, #input$plotellipse,
variable_name_size = 14, #input$namesize,
var_names = TRUE, #input$varnames,
gray_scale = FALSE, #input$greyscale,
EVchoice = c(1,2), #as.numeric(evininput),
plotqual = FALSE, #input$plotqual
scaledmat = FALSE
)
exploding_bipl(
datain[, -1],
percentile_included = 99 /100, #input$percentile /100,
use_convex_hull = FALSE, #input$plothull,
fact_ = 1, #input$densinfl,
numticksfact = 6, #input$moreticks,
round_ticks_to = 1, #input$tickround,
ticks_in_original_units = TRUE, #(input$axvals == "Original"),
plot_the_dens = TRUE, #input$plotdens,
move_lines_dist = 1, #input$mld,
name = 1, #obsnumplot,
plot_all_the_data = TRUE,
tick_size = 12, #input$ticksize,
cluster_var = as.vector(datain[, 1]),
counts_or_densities = c('densities', 'counts')[1], #c('densities', 'counts')[as.numeric(input$countdens)],
smoothing_method = c('smooth.spline', 0)[1], #c('smooth.spline', 0)[as.numeric(input$splinesmooth)],
smooth_par = NULL, #smoothval,
draw_ellipse = FALSE, #input$plotellipse,
variable_name_size = 14, #input$namesize,
var_names = TRUE, #input$varnames,
gray_scale = FALSE, #input$greyscale,
EVchoice = c(1,2), #as.numeric(evininput),
plotqual = FALSE, #input$plotqual
scaledmat = FALSE
)
exploding_bipl(
datain[, -1],
percentile_included = 99 /100, #input$percentile /100,
use_convex_hull = FALSE, #input$plothull,
fact_ = 1, #input$densinfl,
numticksfact = 6, #input$moreticks,
round_ticks_to = 1, #input$tickround,
ticks_in_original_units = TRUE, #(input$axvals == "Original"),
plot_the_dens = TRUE, #input$plotdens,
move_lines_dist = 1, #input$mld,
name = "1", #obsnumplot,
plot_all_the_data = TRUE,
tick_size = 12, #input$ticksize,
cluster_var = as.vector(datain[, 1]),
counts_or_densities = c('densities', 'counts')[1], #c('densities', 'counts')[as.numeric(input$countdens)],
smoothing_method = c('smooth.spline', 0)[1], #c('smooth.spline', 0)[as.numeric(input$splinesmooth)],
smooth_par = NULL, #smoothval,
draw_ellipse = FALSE, #input$plotellipse,
variable_name_size = 14, #input$namesize,
var_names = TRUE, #input$varnames,
gray_scale = FALSE, #input$greyscale,
EVchoice = c(1,2), #as.numeric(evininput),
plotqual = FALSE, #input$plotqual
scaledmat = FALSE
)
exploding_bipl(
datain[, -1],
percentile_included = 99 /100, #input$percentile /100,
use_convex_hull = FALSE, #input$plothull,
fact_ = 1, #input$densinfl,
numticksfact = 6, #input$moreticks,
round_ticks_to = 1, #input$tickround,
ticks_in_original_units = TRUE, #(input$axvals == "Original"),
plot_the_dens = TRUE, #input$plotdens,
move_lines_dist = 1, #input$mld,
name = NULL, #obsnumplot,
plot_all_the_data = TRUE,
tick_size = 12, #input$ticksize,
cluster_var = as.vector(datain[, 1]),
counts_or_densities = c('densities', 'counts')[1], #c('densities', 'counts')[as.numeric(input$countdens)],
smoothing_method = c('smooth.spline', 0)[1], #c('smooth.spline', 0)[as.numeric(input$splinesmooth)],
smooth_par = NULL, #smoothval,
draw_ellipse = FALSE, #input$plotellipse,
variable_name_size = 14, #input$namesize,
var_names = TRUE, #input$varnames,
gray_scale = FALSE, #input$greyscale,
EVchoice = c(1,2), #as.numeric(evininput),
plotqual = FALSE, #input$plotqual
scaledmat = FALSE
)
exploding_bipl(
datain[, -1],
percentile_included = 99 /100, #input$percentile /100,
use_convex_hull = FALSE, #input$plothull,
fact_ = 1, #input$densinfl,
numticksfact = 6, #input$moreticks,
round_ticks_to = 1, #input$tickround,
ticks_in_original_units = TRUE, #(input$axvals == "Original"),
plot_the_dens = TRUE, #input$plotdens,
move_lines_dist = 1, #input$mld,
name = "2", #obsnumplot,
plot_all_the_data = TRUE,
tick_size = 12, #input$ticksize,
cluster_var = as.vector(datain[, 1]),
counts_or_densities = c('densities', 'counts')[1], #c('densities', 'counts')[as.numeric(input$countdens)],
smoothing_method = c('smooth.spline', 0)[1], #c('smooth.spline', 0)[as.numeric(input$splinesmooth)],
smooth_par = NULL, #smoothval,
draw_ellipse = FALSE, #input$plotellipse,
variable_name_size = 14, #input$namesize,
var_names = TRUE, #input$varnames,
gray_scale = FALSE, #input$greyscale,
EVchoice = c(1,2), #as.numeric(evininput),
plotqual = FALSE, #input$plotqual
scaledmat = FALSE
)
datain
Ocoteadata
exploding_bipl(
datain[, -1],
percentile_included = 99 /100, #input$percentile /100,
use_convex_hull = FALSE, #input$plothull,
fact_ = 1, #input$densinfl,
numticksfact = 6, #input$moreticks,
round_ticks_to = 1, #input$tickround,
ticks_in_original_units = TRUE, #(input$axvals == "Original"),
plot_the_dens = TRUE, #input$plotdens,
move_lines_dist = 1, #input$mld,
name = 2, #obsnumplot,
plot_all_the_data = TRUE,
tick_size = 12, #input$ticksize,
cluster_var = as.vector(datain[, 1]),
counts_or_densities = c('densities', 'counts')[1], #c('densities', 'counts')[as.numeric(input$countdens)],
smoothing_method = c('smooth.spline', 0)[1], #c('smooth.spline', 0)[as.numeric(input$splinesmooth)],
smooth_par = NULL, #smoothval,
draw_ellipse = FALSE, #input$plotellipse,
variable_name_size = 14, #input$namesize,
var_names = TRUE, #input$varnames,
gray_scale = FALSE, #input$greyscale,
EVchoice = c(1,2), #as.numeric(evininput),
plotqual = FALSE, #input$plotqual
scaledmat = FALSE
)
runApp()
temptick_n
as.numerictemptick_n
as.numeric(temptick_n)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
?kde2d
runApp()
?dfxy
??dfxy
library(cluster)
library(RConics)
library(pracma)
library(MASS)
library(plotly)
library(ggplot2)
library(ellipsis)
library(FactoMineR)
library(mclust)
library(cluster)
library(shinyWidgets)
library(htmlwidgets)
library(mvtnorm)
library(BiplotGUI)
library(adegraphics)
library('factoextra')
library('PLSbiplot1')
library(psych)
library(ade4)
cars.try = dudi.pca(Mtcarsdata[,-1],scannf = FALSE, nf = 2)
res.mtcars <- scatter(cars.try)
dat.try = dudi.pca(Xclaradata[,-1],scannf = FALSE, nf = 2)
#s.density(datnew,add = TRUE)
res <- scatter(dat.try, clab.row = 0, posieig = "none")
runApp()
runApp()
scatter(dat.try, clab.row = 0, posieig = "none")
shiny::runApp()
runApp()
runApp()
runApp()
args(PCAbipl)
PCAbipl(
Mtcarsdata[,-1],
colours = 'black',
pch.samples = 17,
label.size = 0.8,
ax.name.size = 1.75,
marker.size = 1.6
)
PCAbipl(
Mtcarsdata[,-1],
colours = 'black',
pch.samples = 17,
label.size =1,
ax.name.size = 1,
marker.size = 1
)
args(PCAbipl)
PCAbipl(
Mtcarsdata[,-1],
colours = 'black',
pch.samples = 17,
label.size =0.8,
ax.name.size = 1.5,
marker.size = 1
)
PCAbipl.density(
Xclaradata[,-1],
G = indmat(Xclaradata[,1]),
select.origin = FALSE,
label = FALSE,
#density.plot = TRUE,
#pch.means = 21:23,
specify.classes = 1:3,
#means.plot=TRUE,
#specify.ellipses =1:3,
colours.density = c(gray(0.95), gray(0.6), gray(0.25)),
draw.densitycontours = TRUE,
pch.samples = rep('' , 3),
exp.factor = 1.45,
label.size =1,
ax.name.size = 1.5,
marker.size = 1
)
runApp()
args(fviz_pca_biplot)
args(PCA.biplot)
?(PCA.biplot)
?PCA.biplot
?fviz_pca_biplot
?biplot.psych
biplot.psych(
fa(Mtcarsdata[,-1], 2, scores = TRUE),
col = c('black', gray(0.6)),
main = '',
cuts = 0.1,
labels = rownames(Mtcarsdata)
)
biplot.psych(
fa(Xclaradata[,-1], 2, scores = TRUE),
col = c('black', gray(0.3)),
smoother = TRUE,
group = as.integer(Xclaradata[,1]),
main = '',
labels = rownames(Xclaradata)
)
biplot.psych(
fa(Xclaradata[,-1], 2, scores = TRUE),
col = c('black', gray(0.3)),
smoother = TRUE,
group = as.integer(Xclaradata[,1]),
main = '',
labels = rownames(Xclaradata)
)
cars.try <<- dudi.pca(Mtcarsdata[,-1],scannf = FALSE, nf = 2)
scatter(cars.try)
? dudi.pca
?scatter
cars.try
cars.try$tab
cars.try$cw
cars.try$lw
cars.try$eig
cars.try$rank
cars.try$cent
scatter(cars.try, prop=2)
dat.try <<- dudi.pca(Xclaradata[,-1],scannf = FALSE, nf = 2)
#s.density(datnew,add = TRUE)
scatter(dat.try, clab.row = 0, posieig = "none")
cars.try <<- dudi.pca(Mtcarsdata[,-1],scannf = FALSE, nf = 2)
scatter(cars.try, prop=2)
PCAbipl(
Mtcarsdata[,-1],
colours = 'black',
pch.samples = 17,
label.size =1,
ax.name.size = 1.5,
marker.size = 1
)
PCAbipl.density(
Xclaradata[,-1],
G = indmat(Xclaradata[,1]),
select.origin = FALSE,
label = FALSE,
#density.plot = TRUE,
#pch.means = 21:23,
specify.classes = 1:3,
#means.plot=TRUE,
#specify.ellipses =1:3,
colours.density = c(gray(0.95), gray(0.6), gray(0.25)),
draw.densitycontours = TRUE,
pch.samples = rep('' , 3),
exp.factor = 1.45,
label.size =1,
ax.name.size = 1.5,
marker.size = 1
)
PCAbipl.density(
Xclaradata[,-1],
G = indmat(Xclaradata[,1]),
select.origin = TRUE,
label = FALSE,
#density.plot = TRUE,
#pch.means = 21:23,
specify.classes = 1:3,
#means.plot=TRUE,
#specify.ellipses =1:3,
colours.density = c(gray(0.95), gray(0.6), gray(0.25)),
draw.densitycontours = TRUE,
pch.samples = rep('' , 3),
exp.factor = 1.45,
label.size =1,
ax.name.size = 1.5,
marker.size = 1
)
runApp()
?plotOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat.try <<- dudi.pca(Xclaradata[,-1],scannf = FALSE, nf = 2)
#s.density(datnew,add = TRUE)
scatter(dat.try, clab.row = 0, posieig = "none")    dat.try <<- dudi.pca(Xclaradata[,-1],scannf = FALSE, nf = 2)
#s.density(datnew,add = TRUE)
scatter(dat.try, clab.row = 0, posieig = "none")
dat.try <<- dudi.pca(Xclaradata[,-1],scannf = FALSE, nf = 2)
#s.density(datnew,add = TRUE)
scatter(dat.try, clab.row = 0, posieig = "none")
dat.try <<- dudi.pca(Xclaradata[,-1],scannf = FALSE, nf = 2)
#s.density(datnew,add = TRUE)
scatter(dat.try, clab.row = 0, posieig = "none")
biplot.psych(
fa(Xclaradata[,-1], 2, scores = TRUE),
col = c('black', gray(0.3)),
smoother = TRUE,
group = as.integer(Xclaradata[,1]),
main = '',
labels = rownames(Xclaradata)
)
cars.try <<- dudi.pca(Mtcarsdata[,-1],scannf = FALSE, nf = 2)
scatter(cars.try)
runApp()
runApp()
runApp()
runApp()
tick_n
temptick_n
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
install.packages("GPArotation")
runApp()
runApp()
runApp()
paste("1")
is.numeric("1")
as.value("1")
as.numeric("1")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
